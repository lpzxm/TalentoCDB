// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Jugador {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   @unique
  nombres   String
  apellidos String
  birthDay  DateTime
  codigo    Int      @unique
  grado     String
  seccion   String
  createdAt DateTime @default(now())

  status_main_sport    String?
  status_img_academic  String?
  status_img_behaviour String?

  categories_joined Category_players[]
  rubric_scores     Rubric_Score_player[]
  category_assist   Category_Assist[]
}

model Category_Assist {
  id           Int @id @default(autoincrement())
  id_categoria Int
  id_jugador   Int

  categoria Category_sport @relation(fields: [id_categoria], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jugador   Jugador        @relation(fields: [id_jugador], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime       @default(now())
}

model Coach {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String   @unique
  nombres     String
  apellidos   String
  birthDay    DateTime
  descripcion String   @default("")
  id_sport    Int

  sport Sport @relation(fields: [id_sport], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Sport {
  id   Int    @id @default(autoincrement())
  name String

  coach        Coach[]
  categories   Category_sport[]
  rubricFields Rubric_fields[]
}

model Category_sport {
  id              Int                @id @default(autoincrement())
  id_sport        Int
  name            String
  rules           String
  img             String
  sport           Sport              @relation(fields: [id_sport], references: [id], onDelete: Cascade, onUpdate: Cascade)
  players         Category_players[]
  players_assists Category_Assist[]
}

model Category_players {
  id          Int @id @default(autoincrement())
  id_player   Int
  id_category Int

  player   Jugador        @relation(fields: [id_player], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category Category_sport @relation(fields: [id_category], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Rubric_fields {
  id             Int                   @id @default(autoincrement())
  name           String
  description    String
  max_score      Int
  id_sport       Int
  sport          Sport                 @relation(fields: [id_sport], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scores_players Rubric_Score_player[]
}

model Rubric_Score_player {
  id              Int           @id @default(autoincrement())
  score           Int
  id_player       Int
  id_rubric_field Int
  player          Jugador       @relation(fields: [id_player], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rubric          Rubric_fields @relation(fields: [id_rubric_field], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Admin {
  id        Int    @id @default(autoincrement())
  name      String
  lastnames String
  email     String @unique
  password  String @unique
}
